<?php

namespace EtoxMicrome\Entity2DocumentBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * Compound2Marker2DocumentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Compound2Marker2DocumentRepository extends EntityRepository
{
    public function getAllRelationsFromSentenceId($sentenceId)
    {
        $sql="SELECT c2m2d
            FROM EtoxMicromeEntity2DocumentBundle:Compound2Marker2Document c2m2d
            WHERE c2m2d.sentenceId = (:sentenceId)
            ";

        //ld($sql);
        $query = $this->_em->createQuery($sql);
        $query->setParameter("sentenceId", $sentenceId);
        return $query;

    }

    public function updateCompound2Marker2DocumentCuration($compound2Marker2DocumentId, $action)
    {
        //Explain for the homologous updateEntity2DocumentCuration at Entity2DocumentRepository
        /*Here we get the entity2Document and the action to take for the curation value.
        $action can be check or cross.
        If $action==check, then we have to add one to the curation field of the Entity2Document register
        If $action==cross, then we have to substract one to the curation field of the Entity2Document register

        After that, taking into account the curation value, we have to generate the html to render inside the curation
        */

        //ld($entity2DocumentId);
        //ldd($action);

        $em = $this->getEntityManager();
        $compound2Marker2Document=$em->getRepository('EtoxMicromeEntity2DocumentBundle:Compound2Marker2Document')->findOneById($compound2Marker2DocumentId);
        if (!$compound2Marker2Document) {
            throw $this->createNotFoundException(
                "Cannot curate this Compound2Marker2Document $compound2Marker2DocumentId"
            );
        }
        else{
            $curation=$compound2Marker2Document->getCuration();
            if ($action=="check"){
                $compound2Marker2Document->setCuration($curation + 1);
            }elseif($action=="cross"){
                $compound2Marker2Document->setCuration($curation - 1);
            }
            $em->flush();
            $curationReturn=$compound2Marker2Document->getCuration();
            return($curationReturn);
        }
        return ($curationReturn);
    }

    public function countCompound2MarkerRelations($compoundName)
    {
        $message="inside countCompound2MarkerRelations";
        $em = $this->getEntityManager();
        $query = $em->createQuery('SELECT COUNT(c2t2d.id) FROM EtoxMicromeEntity2DocumentBundle:Compound2Marker2Document c2t2d where c2t2d.compoundName= :compoundName');
        $query->setParameter("compoundName", $compoundName);
        $count = $query->getSingleScalarResult();

        return $count;

    }

    public function findCompounds2Marker2DocumentFromMarker($marker, $dictionaryCompounds)
    {
        //Attention! This function returns 2 arrays. First with keys = compoundName and values= number of times (weight) of this relation
        //Second array have a dictionary with values = compoundName and values = dictionaryRelations
        //dictionaryRelations is an asociative array with keys = typeRelation and values = number of times that this type of relation has been established between this compoundName and the Marker
        $em = $this->getEntityManager();
        $consulta = $em->createQuery('
            SELECT c2m2d
            FROM EtoxMicromeEntity2DocumentBundle:Compound2Marker2Document c2m2d
            WHERE c2m2d.liverMarkerName = :marker
        ');
        $consulta->setParameter('marker', $marker);
        $consulta->setMaxResults(15);
        $arrayCompounds2Marker2Documents = $consulta->execute();
        //We search the arrayCompounds2Marker2Documents and only return the components that are present in the $dictionaryCompounds argument (compounds that already are part of the interaction network)
        $tmpArray=array();//Associative array with the keys="compoundName" and the values="number of times present"
        $tmpArrayTypeRelations=array();//Associative array with the keys="compoundName" and the values=dictionaryRelations
        foreach($arrayCompounds2Marker2Documents as $compound2Marker2Document){
            $compoundName=$compound2Marker2Document->getCompoundName();
            $relationType=$compound2Marker2Document->getRelationType();
            if(array_key_exists($compoundName, $dictionaryCompounds)){
                if (array_key_exists($compoundName, $tmpArray)){
                    $tmpArray[$compoundName]=$tmpArray[$compoundName]+1;
                    //If there is already a tmpArray with this compoundName, there should be already a $tmpArrayTypeRelations that we should update with this new or repeated relationType
                    $dictionaryRelations=$tmpArrayTypeRelations[$compoundName];
                    if (array_key_exists($relationType, $dictionaryRelations)){
                        //We update the entry
                        $dictionaryRelations[$relationType]=$dictionaryRelations[$relationType]+1;
                        $tmpArrayTypeRelations[$compoundName]=$dictionaryRelations;
                    }else{
                        //We create a new entry
                        $dictionaryRelations=$tmpArrayTypeRelations[$compoundName];
                        $dictionaryRelations[$relationType]=1;
                        $tmpArrayTypeRelations[$compoundName]=$dictionaryRelations;
                    }
                }else{
                    $dictionaryRelations=array();
                    $tmpArray[$compoundName]=1;
                    $dictionaryRelations[$relationType]=1;
                    $tmpArrayTypeRelations[$compoundName]=$dictionaryRelations;
                }
            }
        }
        $returnArray=array($tmpArray,$tmpArrayTypeRelations);
        return ($returnArray);
    }
}
