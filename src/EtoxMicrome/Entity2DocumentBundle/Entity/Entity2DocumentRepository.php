<?php

namespace EtoxMicrome\Entity2DocumentBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;
/**
 * Entity2DocumentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Entity2DocumentRepository extends EntityRepository
{
    public function getValToSearch($field)
    {
        switch ($field) {
            case "hepatotoxicity":
                $valToSearch="hepval";
                break;
            case "cardiotoxicity":
                $valToSearch="cardval";
                break;
            case "nephrotoxicity":
                $valToSearch="nephval";
                break;
            case "phospholipidosis":
                $valToSearch="phosval";
                break;
        }
        return $valToSearch;
    }

    public function getOrderBy($orderBy, $valToSearch)
    {
        switch ($orderBy) {
            case "score":
                $orderBy=$valToSearch;
                break;
            case "pattern":
                $orderBy="patternCount";
                break;
            case "rule":
                $orderBy="ruleScore";
                break;
            case "term":
                $orderBy="hepTermVarScore";
                break;
        }
        return $orderBy;
    }

    public function findMarker2DocumentFromDocumentId($documentId)
    {
        $em = $this->getEntityManager();
        $consulta = $em->createQuery('
            SELECT e2d
            FROM EtoxMicromeEntity2DocumentBundle:Entity2Document e2d
            WHERE e2d.document = :documentId
            AND e2d.qualifier= \'Marker\'
        ');
        $consulta->setParameter('documentId', $documentId);
        return $consulta->execute();
    }

    public function getEntity2DocumentFromField($field, $typeOfEntity, $arrayEntityName, $source, $orderBy)
    {
        return $this->getEntity2DocumentFromFieldDQL($field, $typeOfEntity, $arrayEntityName, $source, $orderBy)->getResult();
    }

    public function getEntity2DocumentFromFieldDQL($field, $entityType, $arrayEntityName, $source, $orderBy)
    {//("hepatotoxicity","pubmed","CompoundDict",arrayEntityId)
        #$log = new Logger('my_logger');
        #$log->addWarning('Foo!!!!!!');
        $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        $orderBy=$this->getOrderBy($orderBy, $valToSearch);
        if ($source=="all"){//Depending on the source we add or not the d.kind=source parameter to the query
            /*$sql="SELECT e2d, d
                FROM EtoxMicromeEntity2DocumentBundle:Entity2Document e2d
                JOIN e2d.document d
                WHERE e2d.name IN (:arrayEntityName)
                AND e2d.qualifier = :entityType
                AND e2d.$orderBy is not null
                ";
            */
            $sql="SELECT e2d
                    FROM EtoxMicromeEntity2DocumentBundle:Entity2Document e2d
                    WHERE e2d.name IN (:arrayEntityName)
                    AND e2d.$orderBy is not null
                    AND e2d.qualifier = :entityType
                    ORDER BY e2d.$orderBy DESC
                ";
            $query = $this->_em->createQuery($sql);
            $query->setParameter('arrayEntityName', $arrayEntityName);
            $query->setParameter('entityType', $entityType);
            $query->setMaxResults(10000);
        }else{
            $sql="SELECT e2d,d
                FROM EtoxMicromeEntity2DocumentBundle:Entity2Document e2d
                JOIN e2d.document d
                WHERE e2d.name IN (:arrayEntityName)
                AND e2d.qualifier = :entityType
                AND d.$orderBy is not null
                AND d.kind = :source
                ORDER BY d.$orderBy DESC
                ";


            $query = $this->_em->createQuery($sql);
            $query->setParameter("arrayEntityName", $arrayEntityName);
            $query->setParameter('entityType', $entityType);
            $query->setParameter('source', $source);
            $query->setMaxResults(10000);
        }
        /*
        $rawSql = $query->getSql();
        print_r(array(
            'parameters' => $query->getParameters(),
        ));
        ldd($rawSql);
        */
        return $query;
    }


    public function getCompound2Term2DocumentFromField($field, $typeOfEntity, $arrayEntityName, $orderBy)
    {
        return $this->getCompound2Term2DocumentFromFieldDQL($field, $typeOfEntity, $arrayEntityName, $orderBy)->getResult();
    }

    public function getCompound2Term2DocumentFromFieldDQL($field, $entityType, $arrayEntityName, $orderBy)
    {//("hepatotoxicity","pubmed","CompoundDict",arrayEntityId)
        $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        $orderBy=$this->getOrderBy($orderBy, $valToSearch);
        $sql="SELECT c2t2d
            FROM EtoxMicromeEntity2DocumentBundle:Compound2Term2Document c2t2d
            WHERE c2t2d.compoundName IN (:arrayEntityName)
            ORDER BY c2t2d.$orderBy desc
            ";

        $query = $this->_em->createQuery($sql);
        $query->setParameter("arrayEntityName", $arrayEntityName);
        $query->setMaxResults(10000);
        return $query;

    }

    public function getCompound2TermRelations($field, $typeOfEntity, $arrayEntityName, $source, $orderBy, $curated)
    {
        return $this->getCompound2TermRelationsDQL($field, $typeOfEntity, $arrayEntityName, $source, $orderBy, $curated)->getResult();
    }

    public function getCompound2TermRelationsDQL($field, $entityType, $arrayEntityName, $source, $orderBy, $curated)
    {//("hepatotoxicity","pubmed","CompoundDict",arrayEntityId)
        $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        if($orderBy=="term"){
            $orderBy="term asc";
        }
        elseif($orderBy=="relationType"){
            $orderBy="relationType asc";
        }
        elseif($orderBy=="compoundName"){
            $orderBy="compoundName asc";
        }
        elseif($orderBy=="relationScore" or $orderBy=="hepval"){
            $orderBy="relationScore desc";
        }elseif($orderBy=="curation"){
            $orderBy="curation desc";
        }
        if($source=="all"){
            if ($curated=="yes"){
                $sql="SELECT c2t2d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Term2Document c2t2d
                WHERE c2t2d.compoundName IN (:arrayEntityName)
                AND c2t2d.curation IS not NULL
                ORDER BY c2t2d.$orderBy, c2t2d.hepval desc
                ";
            }
            else{
                $sql="SELECT c2t2d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Term2Document c2t2d
                WHERE c2t2d.compoundName IN (:arrayEntityName)
                ORDER BY c2t2d.$orderBy, c2t2d.hepval desc
                ";
            }

            $query = $this->_em->createQuery($sql);
            $query->setParameter("arrayEntityName", $arrayEntityName);
            $query->setMaxResults(10000);
        }else{
            if ($curated=="yes"){
                $sql="SELECT c2t2d, d
                    FROM EtoxMicromeEntity2DocumentBundle:Compound2Term2Document c2t2d
                    JOIN c2t2d.document d
                    WHERE c2t2d.compoundName IN (:arrayEntityName) AND d.kind = :source
                    AND c2t2d.curation is not null
                    ORDER BY c2t2d.$orderBy , c2t2d.hepval desc
                ";
            }else{
                $sql="SELECT c2t2d, d
                    FROM EtoxMicromeEntity2DocumentBundle:Compound2Term2Document c2t2d
                    JOIN c2t2d.document d
                    WHERE c2t2d.compoundName IN (:arrayEntityName) AND d.kind = :source
                    ORDER BY c2t2d.$orderBy , c2t2d.hepval desc
                ";
            }

            $query = $this->_em->createQuery($sql);
            $query->setParameter("arrayEntityName", $arrayEntityName);
            $query->setParameter("source", $source);
            $query->setMaxResults(10000);
        }
        return $query;

    }

    public function getTerm2CompoundRelations($field, $typeOfEntity, $arrayEntityName, $source, $orderBy, $curated)
    {
        return $this->getTerm2CompoundRelationsDQL($field, $typeOfEntity, $arrayEntityName, $source, $orderBy, $curated)->getResult();
    }

    public function getTerm2CompoundRelationsDQL($field, $entityType, $arrayEntityName, $source, $orderBy, $curated)
    {//("hepatotoxicity","pubmed","CompoundDict",arrayEntityId)
        //Same method as getCompound2TermRelationsDQL but we are searching for terms instead of compounds!!  REFACTOR IT!!!!!
        $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        if($orderBy=="term"){
            $orderBy="term asc";
        }
        elseif($orderBy=="relationType"){
            $orderBy="relationType asc";
        }
        elseif($orderBy=="compoundName"){
            $orderBy="compoundName asc";
        }
        elseif($orderBy=="relationScore" or $orderBy=="hepval"){
            $orderBy="relationScore desc";
        }elseif($orderBy=="curation"){
            $orderBy="curation desc";
        }
        if($source=="all"){
            if ($curated=="yes"){
                $sql="SELECT c2t2d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Term2Document c2t2d
                WHERE c2t2d.term IN (:arrayEntityName)
                AND c2t2d.curation is not null
                ORDER BY c2t2d.$orderBy, c2t2d.hepval desc
                ";
            }
            else{
                $sql="SELECT c2t2d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Term2Document c2t2d
                WHERE c2t2d.term IN (:arrayEntityName)
                ORDER BY c2t2d.$orderBy, c2t2d.hepval desc
                ";
            }
            $query = $this->_em->createQuery($sql);
            $query->setParameter("arrayEntityName", $arrayEntityName);
            $query->setMaxResults(10000);
        }else{
            if($curated=="yes"){
                $sql="SELECT c2t2d, d
                    FROM EtoxMicromeEntity2DocumentBundle:Compound2Term2Document c2t2d
                    JOIN c2t2d.document d
                    WHERE c2t2d.term IN (:arrayEntityName) AND d.kind = :source
                    AND c2t2d.curation is not null
                    ORDER BY c2t2d.$orderBy, c2t2d.hepval desc
                ";
            }
            else{
                $sql="SELECT c2t2d, d
                    FROM EtoxMicromeEntity2DocumentBundle:Compound2Term2Document c2t2d
                    JOIN c2t2d.document d
                    WHERE c2t2d.term IN (:arrayEntityName) AND d.kind = :source
                    ORDER BY c2t2d.$orderBy, c2t2d.hepval desc
                ";
            }

            $query = $this->_em->createQuery($sql);
            $query->setParameter("arrayEntityName", $arrayEntityName);
            $query->setParameter("source", $source);
            $query->setMaxResults(10000);
        }

        return $query;

    }

    public function getCompound2Cytochrome2DocumentFromField($field, $typeOfEntity, $arrayEntityName, $orderBy)
    {
        return $this->getCompound2Cytochrome2DocumentFromFieldDQL($field, $typeOfEntity, $arrayEntityName, $orderBy)->getResult();
    }

    public function getCompound2Cytochrome2DocumentFromFieldDQL($field, $entityType, $arrayEntityName, $orderBy)
    {//("hepatotoxicity","pubmed","CompoundDict",arrayEntityId)
        $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        $orderBy=$this->getOrderBy($orderBy, $valToSearch);
        $sql="SELECT c2c2d
            FROM EtoxMicromeEntity2DocumentBundle:Compound2Cyp2Document c2c2d
            WHERE c2c2d.cypsMention IN (:arrayEntityName)
            ORDER BY c2c2d.relationQualifier desc

            ";

        $query = $this->_em->createQuery($sql);
        $query->setParameter("arrayEntityName", $arrayEntityName);
        $query->setMaxResults(10000);
        return $query;

    }

    public function getCompound2Cytochrome2Relations($field, $typeOfEntity, $arrayEntityName, $source, $orderBy, $curated)
    {
        return $this->getCompound2Cytochrome2RelationsDQL($field, $typeOfEntity, $arrayEntityName, $source, $orderBy, $curated)->getResult();
    }

    public function getCompound2Cytochrome2RelationsDQL($field, $entityType, $arrayEntityName, $source, $orderBy, $curated)
    {//("hepatotoxicity","pubmed","CompoundDict",arrayEntityId)
        $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        $orderBy=$this->getOrderBy($orderBy, $valToSearch);
        if ($orderBy=="hepval" or $orderBy=="inductionScore"){
            $orderBy="inductionScore desc";
            $secondOrderBy="svmInduction";
        }elseif($orderBy=="inhibitionScore"){
            $orderBy="inhibitionScore desc";
            $secondOrderBy="svmInhibition";
        }elseif($orderBy=="metabolismScore"){
            $orderBy=="metabolismScore desc";
            $secondOrderBy="svmMetabolism";
        }elseif($orderBy=="cypsMention"){
            $orderBy=="cypsMention asc";
            $secondOrderBy="svmInduction";
        }elseif($orderBy=="patternRelation"){
            $orderBy=="patternRelation asc";
            $secondOrderBy="svmInduction";
        }elseif($orderBy=="compoundName"){
            $orderBy=="compoundName asc";
            $secondOrderBy="svmInduction";
        }elseif($orderBy=="curation"){
            $orderBy="curation desc";
            $secondOrderBy="svmInduction";
        }
        if($source=="all"){
            if($curated=="yes"){
                $sql="SELECT c2c2d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Cyp2Document c2c2d
                WHERE c2c2d.cypsMention IN (:arrayEntityName)
                AND c2c2d.curation is not null
                ORDER BY c2c2d.$orderBy, c2c2d.$secondOrderBy desc
                ";
            }
            else{
                $sql="SELECT c2c2d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Cyp2Document c2c2d
                WHERE c2c2d.cypsMention IN (:arrayEntityName)
                ORDER BY c2c2d.$orderBy, c2c2d.$secondOrderBy desc
                ";
            }

            $query = $this->_em->createQuery($sql);
            $query->setParameter("arrayEntityName", $arrayEntityName);
            $query->setMaxResults(10000);
        }else{
            if ($curated=="yes"){
                $sql="SELECT c2c2d, d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Cyp2Document c2c2d
                JOIN c2c2d.document d
                WHERE c2c2d.cypsMention IN (:arrayEntityName) AND d.kind= :source
                AND c2c2d.curation is not null
                ORDER BY c2c2d.$orderBy, c2c2d.$secondOrderBy desc
                ";
            }
            else{
                $sql="SELECT c2c2d, d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Cyp2Document c2c2d
                JOIN c2c2d.document d
                WHERE c2c2d.cypsMention IN (:arrayEntityName) AND d.kind= :source
                ORDER BY c2c2d.$orderBy, c2c2d.$secondOrderBy desc
                ";
            }
            $query = $this->_em->createQuery($sql);
            $query->setParameter("arrayEntityName", $arrayEntityName);
            $query->setParameter("source", $source);
            $query->setMaxResults(10000);
        }

        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        return $query;

    }

    public function getCytochrome2CompoundRelations($field, $typeOfEntity, $arrayEntityName, $source, $orderBy, $curated)
    {
        //Same method to getCompound2CytochromeRelations but called when no cytochrome is found in order to search for Compounds... Refactor it!!!!
        return $this->getCytochrome2CompoundRelationsDQL($field, $typeOfEntity, $arrayEntityName, $source, $orderBy, $curated)->getResult();
    }

    public function getCytochrome2CompoundRelationsDQL($field, $entityType, $arrayEntityName, $source, $orderBy, $curated)
    {//("hepatotoxicity","pubmed","CompoundDict",arrayEntityId)
       $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        $orderBy=$this->getOrderBy($orderBy, $valToSearch);
        if ($orderBy=="hepval" or $orderBy=="inductionScore"){
            $orderBy="inductionScore desc";
            $secondOrderBy="svmInduction";
        }elseif($orderBy=="inhibitionScore"){
            $orderBy="inhibitionScore desc";
            $secondOrderBy="svmInhibition";
        }elseif($orderBy=="metabolismScore"){
            $orderBy=="metabolismScore desc";
            $secondOrderBy="svmMetabolism";
        }elseif($orderBy=="cypsMention"){
            $orderBy=="cypsMention asc";
            $secondOrderBy="svmInduction";
        }elseif($orderBy=="patternRelation"){
            $orderBy=="patternRelation asc";
            $secondOrderBy="svmInduction";
        }elseif($orderBy=="compoundName"){
            $orderBy=="compoundName asc";
            $secondOrderBy="svmInduction";
        }elseif($orderBy=="curation"){
            $orderBy="curation desc";
            $secondOrderBy="svmInduction";
        }

        if($source=="all"){
            if ($curated=="yes"){
                $sql="SELECT c2c2d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Cyp2Document c2c2d
                WHERE c2c2d.compoundName IN (:arrayEntityName)
                and c2c2d.curation is not null
                ORDER BY c2c2d.$orderBy, c2c2d.$secondOrderBy desc
                ";
            }else{
                $sql="SELECT c2c2d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Cyp2Document c2c2d
                WHERE c2c2d.compoundName IN (:arrayEntityName)
                ORDER BY c2c2d.$orderBy, c2c2d.$secondOrderBy desc
                ";
            }
            $query = $this->_em->createQuery($sql);
            $query->setParameter("arrayEntityName", $arrayEntityName);
            $query->setMaxResults(10000);
        }else{
            if($curated=="yes"){
                $sql="SELECT c2c2d, d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Cyp2Document c2c2d
                JOIN c2c2d.document d
                WHERE c2c2d.compoundName IN (:arrayEntityName) AND d.kind= :source
                and c2c2d.curation is not null
                ORDER BY c2c2d.$orderBy, c2c2d.$secondOrderBy desc
                ";
            }else{
                $sql="SELECT c2c2d, d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Cyp2Document c2c2d
                JOIN c2c2d.document d
                WHERE c2c2d.compoundName IN (:arrayEntityName) AND d.kind= :source
                ORDER BY c2c2d.$orderBy, c2c2d.$secondOrderBy desc
                ";
            }

            $query = $this->_em->createQuery($sql);
            $query->setParameter("arrayEntityName", $arrayEntityName);
            $query->setParameter("source", $source);
            $query->setMaxResults(10000);
        }

        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        return $query;

    }

    public function getCompound2Marker2DocumentFromField($field, $typeOfEntity, $arrayEntityName)
    {
        return $this->getCompound2Marker2DocumentFromFieldDQL($field, $typeOfEntity, $arrayEntityName)->getResult();
    }

    public function getCompound2Marker2DocumentFromFieldDQL($field, $entityType, $arrayEntityName)
    {//("hepatotoxicity","pubmed","CompoundDict",arrayEntityId)
        $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        $sql="SELECT c2m2d
            FROM EtoxMicromeEntity2DocumentBundle:Compound2Marker2Document c2m2d
            WHERE c2m2d.liverMarkerName IN (:arrayEntityName)
            ORDER BY c2m2d.relationScore desc, c2m2d.relationType desc

            ";

        $query = $this->_em->createQuery($sql);
        $query->setParameter("arrayEntityName", $arrayEntityName);
        $query->setMaxResults(10000);
        return $query;
    }

    public function getCompound2MarkerRelations($field, $typeOfEntity, $arrayEntityName, $source, $orderBy)
    {
        return $this->getCompound2MarkerRelationsDQL($field, $typeOfEntity, $arrayEntityName, $source, $orderBy)->getResult();
    }


    public function getCompound2MarkerRelationsDQL($field, $entityType, $arrayEntityName, $source, $orderBy)
    {//("hepatotoxicity","pubmed","CompoundDict",arrayEntityId)
        $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        $orderBy=$this->getOrderBy($orderBy, $valToSearch);
        if ($orderBy=="hepval" or $orderBy=="relationScore"){
            $orderBy="relationScore DESC";
        }elseif($orderBy=="liverMarkerName"){
            $orderBy="liverMarkerName ASC";
        }elseif($orderBy=="relationType"){
            $orderBy="relationType ASC";
        }elseif($orderBy=="relationQualifier"){
            $orderBy="relationQualifier ASC";
        }elseif($orderBy=="curation"){
            $orderBy="curation desc";
        }
        if($source=="all"){
            $sql="SELECT c2m2d
            FROM EtoxMicromeEntity2DocumentBundle:Compound2Marker2Document c2m2d
            WHERE c2m2d.liverMarkerName IN (:arrayEntityName)
            ORDER BY c2m2d.$orderBy
            ";
            $query = $this->_em->createQuery($sql);
            $query->setParameter("arrayEntityName", $arrayEntityName);
            $query->setMaxResults(10000);
        }else{
            $sql="SELECT c2m2d, d
            FROM EtoxMicromeEntity2DocumentBundle:Compound2Marker2Document c2m2d
            JOIN c2m2d.document d
            WHERE c2m2d.liverMarkerName IN (:arrayEntityName) and d.kind=:source
            ORDER BY c2m2d.$orderBy
            ";
            $query = $this->_em->createQuery($sql);
            $query->setParameter("arrayEntityName", $arrayEntityName);
            $query->setParameter("source", $source);
            $query->setMaxResults(10000);
        }
        return $query;
    }

    public function getMarker2CompoundRelations($field, $typeOfEntity, $arrayEntityName, $source, $orderBy, $curated)
    {
        //Same method to getCompound2MarkerRelations but called when no marker is found in order to search for Compounds... Refactor it!!!!
        return $this->getMarker2CompoundRelationsDQL($field, $typeOfEntity, $arrayEntityName, $source, $orderBy, $curated)->getResult();
    }


    public function getMarker2CompoundRelationsDQL($field, $entityType, $arrayEntityName, $source, $orderBy, $curated)
    {//("hepatotoxicity","pubmed","CompoundDict",arrayEntityId)
        $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        $orderBy=$this->getOrderBy($orderBy, $valToSearch);
        if ($orderBy=="hepval" or $orderBy=="relationScore"){
            $orderBy="relationScore DESC";
        }elseif($orderBy=="liverMarkerName"){
            $orderBy="liverMarkerName ASC";
        }elseif($orderBy=="relationType"){
            $orderBy="relationType ASC";
        }elseif($orderBy=="relationQualifier"){
            $orderBy="relationQualifier ASC";
        }elseif($orderBy=="curation"){
            $orderBy="curation desc";
        }
        if($source=="all"){
            if($curated=="yes"){
                $sql="SELECT c2m2d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Marker2Document c2m2d
                WHERE c2m2d.compoundName IN (:arrayEntityName)
                AND c2m2d.curation is not null
                ORDER BY c2m2d.$orderBy
                ";
            }else{
                $sql="SELECT c2m2d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Marker2Document c2m2d
                WHERE c2m2d.compoundName IN (:arrayEntityName)
                ORDER BY c2m2d.$orderBy
                ";
            }
            $query = $this->_em->createQuery($sql);
            $query->setParameter("arrayEntityName", $arrayEntityName);
            $query->setMaxResults(10000);
        }else{
            if ($curated=="yes"){
                $sql="SELECT c2m2d, d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Marker2Document c2m2d
                JOIN c2m2d.document d
                WHERE c2m2d.compoundName IN (:arrayEntityName) and d.kind=:source
                AND c2m2d.curation is not null
                ORDER BY c2m2d.$orderBy
                ";
            }else{
                $sql="SELECT c2m2d, d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Marker2Document c2m2d
                JOIN c2m2d.document d
                WHERE c2m2d.compoundName IN (:arrayEntityName) and d.kind=:source
                ORDER BY c2m2d.$orderBy
                ";
            }
            $query = $this->_em->createQuery($sql);
            $query->setParameter("arrayEntityName", $arrayEntityName);
            $query->setParameter("source", $source);
            $query->setMaxResults(10000);
        }
        return $query;
    }

    public function getEntity2DocumentElastica($field, $entityType, $arrayEntityName, $orderBy)
    {//("hepatotoxicity","pubmed","CompoundDict",arrayEntityId)
        $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        $orderBy=$this->getOrderBy($orderBy, $valToSearch);

    }

    public function findEntity2DocumentFromDocument($document)
    {
        //Function to search all the entities involved in a particular sentence in order to highlight them
        $documentId=$document->getId();

        $em = $this->getEntityManager();
        $consulta = $em->createQuery('
            SELECT e2d
            FROM EtoxMicromeEntity2DocumentBundle:Entity2Document e2d
            WHERE e2d.document = :documentId
        ');
        $consulta->setParameter('documentId', $documentId);
        return $consulta->execute();
    }

    public function getExportQuery()
    {
        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        $sql="SELECT e2d,d
            FROM EtoxMicromeEntity2DocumentBundle:Entity2Document e2d
            JOIN e2d.document d
            WHERE e2d.qualifier = 'CompoundMesh'
            AND d.hepval is not NULL
            ORDER BY d.hepval desc
            ";

        $query = $this->_em->createQuery($sql);
        return $query;
    }

    public function getEntitySummary($entity2DocumentId, $qualifier){

        $em = $this->getEntityManager();
        $dictionary=array();
        $stringOutput="";
        if ($qualifier=="CompoundDict"){
            $entity2Document=$em->getRepository('EtoxMicromeEntity2DocumentBundle:Entity2Document')->findOneById($entity2DocumentId);
            $nameEntity=$entity2Document->getName();
            $entity=$em->getRepository("EtoxMicromeEntityBundle:CompoundDict")->findOneByName($nameEntity);
            if ($entity!=null){
                //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover
                $name=$entity->getName();
                if($name!=""){
                    $dictionary["name"]="<a href='http://www.chemspider.com/Search.aspx?q=$name' target='_blank'>$name</a>";
                }
                $chemIdPlus=$entity->getChemIdPlus();
                if($chemIdPlus!=""){
                    $dictionary["chemIdPlus"]=$chemIdPlus;
                }
                $chebi=$entity->getChebi();
                if($chebi!=""){
                    $dictionary["chebi"]="<a href='http://www.ebi.ac.uk/chebi/searchId.do?chebiId=$chebi' target='_blank'>$chebi</a>";;
                }
                $casRegistryNumber=$entity->getCasRegistryNumber();
                if($casRegistryNumber!=""){
                    $dictionary["cas Registry Number"]="<a href='http://chem.sis.nlm.nih.gov/chemidplus/rn/$casRegistryNumber' target='_blank'>$casRegistryNumber</a>";
                }

                $inChi=$entity->getInChi();
                if($inChi!=""){
                    $dictionary["inChi"]="<a href='http://www.chemspider.com/Search.aspx?q=$inChi' target='_blank'>$inChi</a>";;
                }
                $drugBank=$entity->getDrugBank();
                if($drugBank!=""){
                    $dictionary["drugBank"]="<a href='http://www.drugbank.ca/drugs/$drugBank' target='_blank'>$drugBank</a>";
                }
                $humanMetabolome=$entity->getHumanMetabolome();
                if($humanMetabolome!=""){
                    $dictionary["humanMetabolome"]="<a href='http://www.hmdb.ca/metabolites/$humanMetabolome' target='_blank'>$humanMetabolome</a>";
                }
                $keggCompound=$entity->getKeggCompound();
                if($keggCompound!=""){
                    $dictionary["keggCompound"]="<a href='http://www.genome.jp/dbget-bin/www_bget?cpd:$keggCompound' target='_blank'>$keggCompound</a>";
                }
                $keggDrug=$entity->getKeggDrug();
                if($keggDrug!=""){
                    $dictionary["keggDrug"]="<a href='http://www.genome.jp/dbget-bin/www_bget?dr:$keggDrug' target='_blank'>$keggDrug</a>";
                }
                $mesh=$entity->getMesh();
                if($mesh!=""){
                    $dictionary["mesh"]="<a href='http://www.nlm.nih.gov/cgi/mesh/2014/MB_cgi?field=uid&term=$mesh' target='_blank'>$mesh</a>";
                }
                $nrDbIds=$entity->getNrDbIds();
                if($nrDbIds!=""){
                    $dictionary["nrDbIds"]=$nrDbIds;
                }
                $smile=$entity->getSmile();
                if($smile!=""){
                    $dictionary["smile"]="<form method='post' action='http://www.chemspider.com/WebAPI.aspx' target='_blank'>
                                            <select name='mode' style='width:210px;display:none'>
                                                <option value='search'>Search Service</option>
                                            </select>
                                            <!--<input type='hidden' name='molfile' />-->
                                            <textarea name='molfile' cols='50' row='50'>$smile</textarea>
                                            <input type='submit' value='Search SMILE in ChemSpider' />
                                        </form>
                    ";
                }
            }
        }

        if($qualifier=="Marker"){
            $entity2Document=$em->getRepository('EtoxMicromeEntity2DocumentBundle:Entity2Document')->findOneById($entity2DocumentId);
            $nameEntity=$entity2Document->getName();
            $entity=$em->getRepository("EtoxMicromeEntityBundle:Marker")->findOneByName($nameEntity);
            //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover
            if($entity!=null){
                $name=$entity->getName();
                if($name!=""){
                    $dictionary["name"]=$name;
                }
                /*We don't need the tax
                $tax=$entity->getTax();
                if($tax!=""){
                    $dictionary["tax"]=$tax;
                }
                */
                $entityId=$entity->getEntityId();

                $markerType=$entity->getMarkerType();
                if($markerType=="marker"){
                    $markerType="Unspecific";
                }elseif($markerType=="pubchem"){
                    $markerType="Compound";
                    //entityId="CID 10964";// outlink="http://pubchem.ncbi.nlm.nih.gov/summary/summary.cgi?cid=10964"
                    $entityIdCut=substr($entityId, 4);
                    $outlink="http://pubchem.ncbi.nlm.nih.gov/summary/summary.cgi?cid=$entityIdCut";
                    $dictionary["Marker id"]="<a href='$outlink' target='_blank'>$entityId</a>";
                }elseif($markerType=="protein_uniprot"){
                    $markerType="Protein";
                    //entityId=P24298  //outlink=http://www.uniprot.org/uniprot/P24298
                    $outlink="http://www.uniprot.org/uniprot/$entityId";
                    $dictionary["Marker id"]="<a href='$outlink' target='_blank'>$entityId</a>";
                }

                $dictionary["Marker Type"]=$markerType;

            }
        }

        if($qualifier=="Specie"){
            $entity2Document=$em->getRepository('EtoxMicromeEntity2DocumentBundle:Entity2Document')->findOneById($entity2DocumentId);
            $nameEntity=$entity2Document->getName();
            $entity=$em->getRepository("EtoxMicromeEntityBundle:Specie")->findOneByName($nameEntity);
            //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover
            if ($entity!=null){
                $name=$entity->getName();
                if($name!=""){
                    $dictionary["name"]=$name;
                }
                $nameClass=$entity->getNameClass();
                if($nameClass!=""){
                    $dictionary["nameClass"]=$nameClass;
                }
                $ncbiTaxId=$entity->getNcbiTaxId();
                if($ncbiTaxId!=""){
                    $dictionary["NCBItaxId"]="<a href='http://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=$ncbiTaxId&lvl=0' target='_blank'>$ncbiTaxId</a>";
                }
                $specieCategory=$entity->getSpecieCategory();
                if($specieCategory!=""){
                    $dictionary["specieCategory"]=$specieCategory;
                }
                $specieTox=$entity->getSpecieTox();
                if($specieTox!=""){
                    $dictionary["specieTox"]=$specieTox;
                }
            }

        }

        if($qualifier=="HepKeywordTermNorm"){
            $term2Document=$em->getRepository('EtoxMicromeEntity2DocumentBundle:HepKeywordTermNorm2Document')->findOneById($entity2DocumentId);
            //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover
            if($term2Document!=null){
                $normalizedTerm=$term2Document->getHepKeywordNorm();
                if($normalizedTerm!=""){
                    $dictionary["Normalized Term"]=$normalizedTerm;
                }
                $kind=$term2Document->getKind();
                if($kind!=""){
                    $dictionary["kind"]=$kind;
                }
            }
        }

        if($qualifier=="HepKeywordTermVariant"){
            //ld($entity2DocumentId);
            $term2Document=$em->getRepository('EtoxMicromeEntity2DocumentBundle:HepKeywordTermVariant2Document')->findOneById($entity2DocumentId);
            //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover
            //ld($term2Document);
            if($term2Document!=null){
                $term=$term2Document->getTermVariant();
                //ld($term);
                //Now we search the term in the hepatotoxkeyword table getEntityFromName
                $term = $em->getRepository('EtoxMicromeEntityBundle:HepatotoxKeyword')->getEntityFromName($term);
                if (count($term)!=0){
                    if($term!=""){
                        $dictionary["term"]=$term->getTerm();
                    }
                    $normalizedTerm=$term->getNorm();
                    if($normalizedTerm!=""){
                        $dictionary["Normalized Term"]=$normalizedTerm;
                    }
                    $pos=$term->getPos();
                    if($pos!=""){
                        $dictionary["Pos"]=$pos;
                    }
                    $efpia=$term->getEFPIA();
                    if($efpia!=""){
                        $dictionary["EFPIA"]=$efpia;
                    }
                    $costart=$term->getCOSTART();
                    if($costart!=""){
                        $dictionary["COSTART"]=$costart;
                    }
                    $meddra=$term->getMedDRA();
                    if($meddra!=""){
                        $dictionary["MedDRA"]=$meddra;
                    }
                    $mpheno=$term->getMPheno();
                    if($mpheno!=""){
                        $dictionary["MPheno"]=$mpheno;
                    }
                    $adverseEvents=$term->getAdverseEvents();
                    if($adverseEvents!=""){
                        $dictionary["Adverse Events"]=$adverseEvents;
                    }
                    $do=$term->getDo();
                    if($do!=""){
                        $dictionary["Do"]=$do;
                    }

                    $gemina_symptom=$term->getGeminaSymptom();
                    if($gemina_symptom!=""){
                        $dictionary["Gemina Symptom"]=$gemina_symptom;
                    }
                    $human_phenotype=$term->getHumanPhenotype();
                    if($human_phenotype!=""){
                        $dictionary["Human Phenotype"]=$human_phenotype;
                    }
                    $mpath=$term->getMpath();
                    if($mpath!=""){
                        $dictionary["Mpath"]=$mpath;
                    }
                    $etox=$term->getEtox();
                    if($etox!=""){
                        $dictionary["Etox"]=$etox;
                    }

                    $mesh_omim=$term->getMESH_OMIM();
                    if($mesh_omim!=""){
                        $dictionary["MESH_OMIM"]=$mesh_omim;
                    }

                    $polysearch=$term->getPolysearch();
                    if($polysearch!=""){
                        $dictionary["Polysearch"]=$polysearch;
                    }
                }
            }
        }

        if($qualifier=="Cytochrome"){
            $warning=false;
            $message="getEntitySummary for cytochrome";
            //ld($entity2DocumentId);
            $cytochrome2Document=$em->getRepository('EtoxMicromeEntity2DocumentBundle:Cytochrome2Document')->findOneById($entity2DocumentId);
            //ld($cytochrome2Document);
            if ($cytochrome2Document!=null){
                //////////////////////////////////////////////////////////////////////
                ////////////////////////CYP NORMALIZATION PROTOCOL////////////////////
                //////////////////////////////////////////////////////////////////////
                //We already have the document info and the cytochrome info.
                $documentId=$cytochrome2Document->getDocument()->getId();
                //ld($documentId);
                //2.- We select the species for the same sentence
                $specie2documentArray=$em->getRepository('EtoxMicromeEntity2DocumentBundle:Specie2Document')->findByDocument($documentId);
                    //We also create an array with the species co-mentioned that will be usefull later.
                //ld($specie2documentArray);
                $arraySpecies=array();
                foreach($specie2documentArray as $specie2Document){
                    $arraySpecies[]=$specie2Document->getSpecie();
                }
                //ld($arraySpecies);
                if(count($arraySpecies)>0){
                    $taxId=$arraySpecies[0]->getNcbiTaxId();
                    $nameSpecie=$arraySpecies[0]->getName();
                }
                else{
                    $taxId="9606";
                }
                //1.- We select CYPs mentioning sentence
                $cytochromeName=$cytochrome2Document->getCypsMention();
                //ld($cytochromeName);
                $arrayCytochromes=$em->getRepository('EtoxMicromeEntityBundle:Cytochrome')->findByName($cytochromeName);

                if(count($arrayCytochromes)==0){
                    //Doesn't exist a cytochrome with that name... we should look for a cytochrome by canonical??
                    $arrayCytochromes=$em->getRepository('EtoxMicromeEntityBundle:Cytochrome')->findByCanonical($cytochrome2Document->getCypsCanonical());
                }
                //ld($arrayCytochromes);

                //3.- We search if there are co-ocurrence of CYPs-mention taxId with the species tax
                $numberCoocurrences=0;
                foreach($specie2documentArray as $specie2Document){
                    $specieDocumentTaxId=$specie2Document->getSpecie()->getNcbiTaxId();
                    //We search inside the $arrayCytochromes
                    foreach($arrayCytochromes as $cytochrome){
                        if($cytochrome->getTax()==$specieDocumentTaxId){
                            $numberCoocurrences=$numberCoocurrences+1;
                        }
                    }
                }
                //ld($numberCoocurrences);

                    //3.1.- If there is no co-occurrence between CYPs mention and species
                    //We check mention against dictionary names if nothing is found then we check against canonicals
                //ld($numberCoocurrences);
                if($numberCoocurrences==0){
                    $message="Inside numberCoocurrences==0";
                    //So far we have the name, taxid and accession for each cytochrome inside each cytochrome object inside arraycytochromes.
                    //We search if there is a human taxId for any of the cytochromes inisde the arraycytochromes
                    $humanFound=false;
                    foreach($arrayCytochromes as $cytochromeTmp){
                        $tmpTaxId=$cytochromeTmp->getTax();
                        if($tmpTaxId=="9606"){
                            $humanFound=true;
                        }
                    }
                    //ld($arrayCytochromes);
                    //ld($humanFound);
                    if($humanFound){//If a human is found we check CYPS ranking for human only
                        $arrayCytochromesSortedByRanking=$em->getRepository('EtoxMicromeEntity2DocumentBundle:Specie2Document')->getBetterRanked($arrayCytochromes, "9606");
                    }else{//If a human is not found, we check CYPS ranking for all of the cytochromes
                        $arrayCytochromesSortedByRanking=$em->getRepository('EtoxMicromeEntity2DocumentBundle:Specie2Document')->getBetterRanked($arrayCytochromes, "all");
                    }
                    //ld($arrayCytochromes);
                    //ld($arrayCytochromesSortedByRanking);
                    $firstHitRankingOutput=$arrayCytochromesSortedByRanking[0];
                    //ld($firstHitRankingOutput);


                }elseif($numberCoocurrences==1){
                    $message="Inside numberCoocurrences==1";
                    //3.2.- If there is one co-occurrence between CYPs mention and species
                    //So far we have the name, taxid and accession for each cytochrome inside each cytochrome object inside arraycytochromes.
                    //We have to check if the cytochromeTaxId is the same as co-ocurring taxId for any of the cytochromes inisde the arraycytochromes
                    $sameSpecie=false;
                    foreach($arrayCytochromes as $cytochromeTmp){
                        $tmpTaxId=$cytochromeTmp->getTax();
                        if($tmpTaxId==$taxId){
                            $sameSpecie=true;
                        }
                    }
                    if($sameSpecie){//If the specie has been found, we check CYPs ranking for that taxId
                        $arrayCytochromesSortedByRanking=$em->getRepository('EtoxMicromeEntity2DocumentBundle:Specie2Document')->getBetterRanked($arrayCytochromes, $taxId);
                    }else{//If the specie has not been found, we add a Warning and check ranking for all cytochromes
                        $warning=true;
                        $arrayCytochromesSortedByRanking=$em->getRepository('EtoxMicromeEntity2DocumentBundle:Specie2Document')->getBetterRanked($arrayCytochromes, "all");
                    }
                    $firstHitRankingOutput=$arrayCytochromesSortedByRanking[0];
                    //ld($firstHitRankingOutput);
                }else{
                    $message="Inside numberCoocurrences>1";
                    //3.3.- If there is more than one co-occurrence between CYPs mention and species
                    //We check mention against dictionary names if nothing is found then we check against canonicals
                    //So far we have the name, taxid and accession for each cytochrome inside each cytochrome object inside arrayCytochromes.
                    //We have to check if the taxIds of the cytochromes inside the arrayCytochromes are in the list of the co-ocurring species list ()
                    //We create a list with the cytochromes that have co-ocurring taxIdsOfCytochromes with the species co-mentioned in the document
                    $taxIdInListSpecies=false;
                    $arrayWithCytochromesCoocurring=array();
                    foreach($arraySpecies as $specie){
                        $taxIdInSpecie=$specie->getNcbiTaxId();
                        foreach($arrayCytochromes as $cytochrome){
                            $cytTaxId=$cytochrome->getTax();
                            if($cytTaxId==$taxIdInSpecie){
                                $arrayWithCytochromesCoocurring[]=$cytochrome;
                                $taxIdInListSpecies=true;
                            }
                        }
                    }
                    if($taxIdInListSpecies){//If there are cytochromes co-ocurring, we have to check ranking for that cytochromes
                        $arrayCytochromesSortedByRanking=$em->getRepository('EtoxMicromeEntity2DocumentBundle:Specie2Document')->getBetterRanked($arrayWithCytochromesCoocurring, "all");
                    }else{//If there are no cytochromes co-ocurring, we add a Warning and check ranking for all of the cytochromes
                        $warning=true;
                        $arrayCytochromesSortedByRanking=$em->getRepository('EtoxMicromeEntity2DocumentBundle:Specie2Document')->getBetterRanked($arrayCytochromes, "all");
                    }
                    $firstHitRankingOutput=$arrayCytochromesSortedByRanking[0];
                }
                //////////////////////////////////////////////////////////////////////
                ///////////////////END OF CYP NORMALIZATION PROTOCOL//////////////////
                //////////////////////////////////////////////////////////////////////

                if ($firstHitRankingOutput!=null){
                    //
                    $dictionary['Name/Mention']=$firstHitRankingOutput->getName();
                    $canonical=$firstHitRankingOutput->getCanonical();
                    $canonicalCut=substr($canonical, 3);
                    $dictionary['Canonical']="<a href=\"http://bioinformatics.charite.de/supercyp/index.php?site=cyp_drug_ia#cyp=$canonicalCut\" target=\"_blank\">$canonical</a>";
                    $ncbiTaxId=$firstHitRankingOutput->getTax();
                    $specie=$em->getRepository('EtoxMicromeEntityBundle:Specie')->findOneByNcbiTaxId($ncbiTaxId);
                    $specieName=$specie->getName();
                    $dictionary['TaxId']="<a href='http://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=$ncbiTaxId&lvl=0' target='_blank'>$ncbiTaxId</a>";
                    $accession=$firstHitRankingOutput->getEntityId();
                    $dictionary['Uniprot accession']="<a href=\"http://www.uniprot.org/uniprot/$accession\" target=\"_blank\">$accession</a>";
                    if($warning){
                        $dictionary['Warning!']="Potential species mismatch between CYPs name dictionary and sentence context";
                    }


                }
            }
        }

        foreach($dictionary as $key => $value){
            if ($value!=""){
                $stringOutput=$stringOutput."<strong>$key:</strong> $value<br/>";
            }
        }
        return ($stringOutput);
    }

    public function getEntitySummaryFromName($name, $qualifier){
        $em = $this->getEntityManager();
        $dictionary=array();
        $stringOutput="";
        if ($qualifier=="CompoundDict"){
            $entity=$em->getRepository("EtoxMicromeEntityBundle:CompoundDict")->getEntityFromName($name);
            if ($entity!=null){
                //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover
                $name=$entity->getName();
                if($name!=""){
                    $dictionary["name"]="<a href='http://www.chemspider.com/Search.aspx?q=$name' target='_blank'>$name</a>";
                }
                $chemIdPlus=$entity->getChemIdPlus();
                if($chemIdPlus!=""){
                    $dictionary["chemIdPlus"]=$chemIdPlus;
                }
                $chebi=$entity->getChebi();
                if($chebi!=""){
                    $dictionary["chebi"]="<a href='http://www.ebi.ac.uk/chebi/searchId.do?chebiId=$chebi' target='_blank'>$chebi</a>";
                }
                $casRegistryNumber=$entity->getCasRegistryNumber();
                if($casRegistryNumber!=""){
                    $dictionary["cas Registry Number"]="<a href='http://chem.sis.nlm.nih.gov/chemidplus/rn/$casRegistryNumber' target='_blank'>$casRegistryNumber</a>";
                }
                $inChi=$entity->getInChi();
                if($inChi!=""){
                    $dictionary["inChi"]="<a href='http://www.chemspider.com/Search.aspx?q=$inChi' target='_blank'>$inChi</a>";
                    $dictionary["Unichem"]=0;
                }
                $drugBank=$entity->getDrugBank();
                if($drugBank!=""){
                    $dictionary["drugBank"]="<a href='http://www.drugbank.ca/drugs/$drugBank' target='_blank'>$drugBank</a>";
                }
                $humanMetabolome=$entity->getHumanMetabolome();
                if($humanMetabolome!=""){
                    $dictionary["humanMetabolome"]="<a href='http://www.hmdb.ca/metabolites/$humanMetabolome' target='_blank'>$humanMetabolome</a>";
                }
                $keggCompound=$entity->getKeggCompound();
                if($keggCompound!=""){
                    $dictionary["keggCompound"]="<a href='http://www.genome.jp/dbget-bin/www_bget?cpd:$keggCompound' target='_blank'>$keggCompound</a>";
                }
                $keggDrug=$entity->getKeggDrug();
                if($keggDrug!=""){
                    $dictionary["keggDrug"]="<a href='http://www.genome.jp/dbget-bin/www_bget?dr:$keggDrug' target='_blank'>$keggDrug</a>";
                }
                $mesh=$entity->getMesh();
                if($mesh!=""){
                    $dictionary["mesh"]="<a href='http://www.nlm.nih.gov/cgi/mesh/2014/MB_cgi?field=uid&term=$mesh' target='_blank'>$mesh</a>";
                }
                $nrDbIds=$entity->getNrDbIds();
                if($nrDbIds!=""){
                    $dictionary["nrDbIds"]=$nrDbIds;
                }
                $smile=$entity->getSmile();
                if($smile!=""){
                    $dictionary["smile"]="<form method='post' action='http://www.chemspider.com/WebAPI.aspx' target='_blank'>
                                            <select name='mode' style='width:210px;display:none'>
                                                <option value='search'>Search Service</option>
                                            </select>
                                            <!--<input type='hidden' name='molfile' />-->
                                            <textarea name='molfile' cols='50' row='50'>$smile</textarea>
                                            <input type='submit' value='Search SMILE in ChemSpider' />
                                        </form>
                    ";
                }
            }
        }

        if($qualifier=="Marker"){
            $entity=$em->getRepository("EtoxMicromeEntityBundle:Marker")->getEntityFromName($name);
            //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover
            if($entity!=null){
                $name=$entity->getName();
                if($name!=""){
                    $dictionary["name"]=$name;
                }
                /*We don't need the tax
                $tax=$entity->getTax();
                if($tax!=""){
                    $dictionary["tax"]=$tax;
                }
                */
                $entityId=$entity->getEntityId();

                $markerType=$entity->getMarkerType();
                if($markerType=="marker"){
                    $markerType="Unspecific";
                }elseif($markerType=="pubchem"){
                    $markerType="Compound";
                    //entityId="CID 10964";// outlink="http://pubchem.ncbi.nlm.nih.gov/summary/summary.cgi?cid=10964"
                    $entityIdCut=substr($entityId, 4);
                    $outlink="http://pubchem.ncbi.nlm.nih.gov/summary/summary.cgi?cid=$entityIdCut";
                    $dictionary["Marker id"]="<a href='$outlink' target='_blank'>$entityId</a>";
                }elseif($markerType=="protein_uniprot"){
                    $markerType="Protein";
                    //entityId=P24298  //outlink=http://www.uniprot.org/uniprot/P24298
                    $outlink="http://www.uniprot.org/uniprot/$entityId";
                    $dictionary["Uniprot ID"]="<a href='$outlink' target='_blank'>$entityId</a>";
                }

                $dictionary["Marker Type"]=$markerType;

            }
        }

        if($qualifier=="Specie"){
            $entity=$em->getRepository("EtoxMicromeEntityBundle:Specie")->findOneByName($name);
            //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover
            if ($entity!=null){
                $name=$entity->getName();
                if($name!=""){
                    $dictionary["name"]=$name;
                }
                $nameClass=$entity->getNameClass();
                if($nameClass!=""){
                    $dictionary["nameClass"]=$nameClass;
                }
                $ncbiTaxId=$entity->getNcbiTaxId();
                if($ncbiTaxId!=""){
                    $dictionary["NCBItaxId"]="<a href='http://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=$ncbiTaxId&lvl=0' target='_blank'>$ncbiTaxId</a>";
                }
                $specieCategory=$entity->getSpecieCategory();
                if($specieCategory!=""){
                    $dictionary["specieCategory"]=$specieCategory;
                }
                $specieTox=$entity->getSpecieTox();
                if($specieTox!=""){
                    $dictionary["specieTox"]=$specieTox;
                }
            }

        }

        if($qualifier=="Cytochrome"){
            $message="inside getEntitySummaryFromName for the cytochrome entityType";
            $entity=$em->getRepository("EtoxMicromeEntityBundle:Cytochrome")->getEntityFromName($name);
            //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover
            if ($entity!=null){
                $name=$entity->getName();
                if($name!=""){
                    $dictionary["name"]=$name;
                }
                $entityId=$entity->getEntityId();
                if($entityId!=""){
                    $outlink="http://www.uniprot.org/uniprot/$entityId";
                    $dictionary["UniprotID"]="<a href='$outlink' target='_blank'>$entityId</a>";
                }
                $type=$entity->getType();
                if($type!=""){
                    $dictionary["Type"]=$type;
                }
                $ncbiTaxId=$entity->getTax();
                if($ncbiTaxId!=""){
                    $dictionary["Tax"]="<a href='http://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=$ncbiTaxId&lvl=0' target='_blank'>$ncbiTaxId</a>";
                }

                $canonical=$entity->getCanonical();
                if($canonical!=""){
                    $dictionary["Canonical"]=$canonical;
                }
            }

        }

        if($qualifier=="Term"){
            $message="inside getEntitySummaryFromName for the term entityType";
            $entity=$em->getRepository("EtoxMicromeEntityBundle:Hepatotoxkeyword")->getEntityFromName($name);
            //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover
            if ($entity!=null){
                $term=$entity->getTerm();
                if($term!=""){
                    $dictionary["Term"]=$term;
                }
                $norm=$entity->getNorm();
                if($norm!=""){
                    $dictionary["Norm"]=$norm;
                }
                $pos=$entity->getPos();
                if($pos!=""){
                    $dictionary["Pos"]=$pos;
                }
                $efpia=$entity->getEFPIA();
                if($efpia!=""){
                    $dictionary["EFPIA"]=$efpia;
                }
                $costart=$entity->getCOSTART();
                if($costart!=""){
                    $dictionary["COSTART"]=$costart;
                }
                $medDra=$entity->getMedDRA();
                if($medDra!=""){
                    $dictionary["MedDRA"]=$medDra;
                }
                $mPheno=$entity->getMPheno();
                if($mPheno!=""){
                    $dictionary["MPheno"]=$mPheno;
                }
                $adverseEvents=$entity->getAdverseEvents();
                if($adverseEvents!=""){
                    $dictionary["Adverse Events"]=$adverseEvents;
                }
                $do=$entity->getDo();
                if($do!=""){
                    $dictionary["Do"]=$do;
                }
                $geminaSymptom=$entity->getGeminaSymptom();
                if($geminaSymptom!=""){
                    $dictionary["Gemina Symptom"]=$geminaSymptom;
                }
                $humanPhenotype=$entity->getHumanPhenotype();
                if($humanPhenotype!=""){
                    $dictionary["Human Phenotype"]=$humanPhenotype;
                }
                $mpath=$entity->getMpath();
                if($mpath!=""){
                    $dictionary["Mpath"]=$mpath;
                }
                $meshOmim=$entity->getMESH_OMIM();
                if($meshOmim!=""){
                    $dictionary["MESH OMIM"]=$meshOmim;
                }
                $polysearch=$entity->getPolysearch();
                if($polysearch!=""){
                    $dictionary["Polysearch"]=$polysearch;
                }
                $etox=$entity->getEtox();
                if($etox!=""){
                    $dictionary["eTOX"]=$etox;
                }

            }

        }

        foreach($dictionary as $key => $value){
            if ($value!=""){
                $stringOutput=$stringOutput."<strong>$key:</strong> $value<br/>";
            }
        }
        return ($stringOutput);
    }

    public function countCompound2Document($compoundName)
    {
        $message="inside countCompound2Document";
        $em = $this->getEntityManager();
        $query = $em->createQuery('SELECT COUNT(c2d.id) FROM EtoxMicromeEntity2DocumentBundle:Entity2Document c2d where c2d.name= :compoundName');
        $query->setParameter("compoundName", $compoundName);
        $count = $query->getSingleScalarResult();

        return $count;

    }

    public function updateEntity2DocumentCuration($entity2DocumentId, $action)
    {
        $message="updateEntity2DocumentCuration";
        /*Here we get the entity2Document and the action to take for the curation value.
        $action can be check or cross.
        If $action==check, then we have to add one to the curation field of the Entity2Document register
        If $action==cross, then we have to substract one to the curation field of the Entity2Document register

        After that, taking into account the curation value, we have to generate the html to render inside the curation
        */

        //ld($entity2DocumentId);
        //ldd($action);

        $em = $this->getEntityManager();
        $entity2Document=$em->getRepository('EtoxMicromeEntity2DocumentBundle:Entity2Document')->findOneById($entity2DocumentId);
        if (!$entity2Document) {
            throw $this->createNotFoundException(
                "Cannot curate this Entity2Document $entity2DocumentId"
            );
        }
        else{
            $curation=$entity2Document->getCuration();
            if ($action=="check"){
                $entity2Document->setCuration($curation + 1);
            }elseif($action=="cross"){
                $entity2Document->setCuration($curation - 1);
            }
            $em->persist($entity2Document);
            $em->flush();
            //ld($entity2Document->getCuration());
            $curationReturn=$entity2Document->getCuration();
            return($curationReturn);
        }
        return ($curationReturn);
    }

    public function getCuratedEntity2Document($qualifier)
    {
        return $this->getCuratedEntity2DocumentDQL($qualifier)->getResult();
    }

    public function getCuratedEntity2DocumentDQL($qualifier)
    {
        $message="getCuratedEntity2Document";
        $sql="SELECT e2d
                FROM EtoxMicromeEntity2DocumentBundle:Entity2Document e2d
                WHERE e2d.curation is not null
                AND e2d.qualifier = :qualifier
                ORDER BY e2d.curation desc
            ";
        $query = $this->_em->createQuery($sql);
        $query->setParameter("qualifier", $qualifier);
        return ($query);
    }

    public function getCuratedEntity2DocumentName($qualifier, $entityName)
    {
        return $this->getCuratedEntity2DocumentNameDQL($qualifier, $entityName)->getResult();
    }

    public function getCuratedEntity2DocumentNameDQL($qualifier, $entityName)
    {
        $message="getCuratedEntity2Document";
        $sql="SELECT e2d
                FROM EtoxMicromeEntity2DocumentBundle:Entity2Document e2d
                WHERE e2d.curation is not null
                AND e2d.name= :entityName
                AND e2d.qualifier = :qualifier
                ORDER BY e2d.curation desc
            ";
        $query = $this->_em->createQuery($sql);
        $query->setParameter("qualifier", $qualifier);
        $query->setParameter("entityName", $entityName);

        return ($query);
    }

    public function getDocumentsFromName($entityName, $orderBy){
        $message="inside getDocumentsFromName";
        $sql="SELECT e2d
            FROM EtoxMicromeEntity2DocumentBundle:Entity2Document e2d
            WHERE e2d.name = (:entityName)
            ORDER BY e2d.$orderBy desc
            ";

        $query = $this->_em->createQuery($sql);
        $query->setParameter("entityName", $entityName);
        $arrayEntity2Documents= $query->getResult();
        return($arrayEntity2Documents);
    }

    public function createDictionaryRelationsCytoscape($entityName,$entityType){
        $message="inside createDictionaryRelationsCytoscape";
        $diccionarioTerms=array();
        $diccionarioMarkers=array();
        $diccionarioCytochromes=array();
        $diccionarioCompounds=array();
        $diccionarioGenes=array();
        $diccionarioRelations=array();

        $dictionaryTypeRelationsCompound=array();
        $dictionaryTypeRelationsTerm=array();
        $dictionaryTypeRelationsCyp=array();
        $dictionaryTypeRelationsMarker=array();
        $dictionaryTypeRelations=array();

        $em = $this->getEntityManager();
        if($entityType=="Cytochrome"){
            //We have to see all interactions between this cytochrome and the rest of the entities if possible.
            //We start loading relations with compounds and keep the documents in which they are present. Then searching for entities inside those documents, we can load the other relations. So we'll use the arrayDocuments to load the document_id

            $arrayDocuments=array();
            $arrayRelations=array();

            $sql="SELECT c2c2d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Cyp2Document c2c2d
                WHERE c2c2d.cypsMention = (:entityName)
                ORDER BY c2c2d.sumScore DESC
                ";

            $query = $this->_em->createQuery($sql);
            $query->setParameter("entityName", $entityName);
            $query->setMaxResults(15);
            $arrayCompound2Cyp2Document= $query->getResult();

            foreach($arrayCompound2Cyp2Document as $compound2Cyp2Document){
                $compound=$compound2Cyp2Document->getCompoundName();
                $relationType=$compound2Term2Document->getPatternRelation();
                //we search for the compound inside diccionarioCytochromes
                if (array_key_exists($compound, $diccionarioCompounds)){
                    //If the compound already exists in the diccionarioCompounds we update the counter of documents supporting the relation
                    $diccionarioCompounds[$compound]=$diccionarioCompounds[$compound] + 1;
                    //There should be $dictionaryTypeRelationsCyp related we update it
                    $dictionaryTmp=$dictionaryTypeRelationsCompound[$compound];
                    if(array_key_exists($relationType, $dictionaryTmp)){
                        $dictionaryTmp[$relationType]=$dictionaryTmp[$relationType]+1;
                    }else{
                        //Create a new one
                        $dictionaryTmp[$relationType]=1;
                    }
                    $dictionaryTypeRelationsCompound[$compound]=$dictionaryTmp;
                }else{
                    //If that compound doesnt exist yet, we create a new entry inside diccionarioCytochromes
                    $diccionarioCompounds[$compound]=1;
                    //We also save the type of the relation established between the term and the compound:
                    $dictionaryTypeRelationsCompound[$compound][$relationType]=1;
                }
                $documentId=$compound2Cyp2Document->getDocument()->getId();
                array_push($arrayDocuments, $documentId);
            }
            $diccionarioRelations["compounds"]=$diccionarioCompounds;
            $dictionaryTypeRelations["compounds"]=$dictionaryTypeRelationsCompound;

        }elseif($entityType=="CompoundDict"){
            //We start loading the terms relations
            $sql="SELECT c2t2d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Term2Document c2t2d
                WHERE lower(c2t2d.compoundName) = (:entityName)
                ORDER BY c2t2d.relationScore DESC
                ";
            $query = $this->_em->createQuery($sql);
            $query->setParameter("entityName", strtolower($entityName));
            $query->setMaxResults(50);
            $arrayCompound2Term2Document= $query->getResult();
            foreach($arrayCompound2Term2Document as $compound2Term2Document){
                $term=$compound2Term2Document->getTerm();
                $relationType=$compound2Term2Document->getRelationType();
                //we search for the term inside diccionarioTerms
                if (array_key_exists($term, $diccionarioTerms)){
                    //If the term already exists in the diccionarioTerms we update the counter of documents supporting the relation
                    $diccionarioTerms[$term]=$diccionarioTerms[$term] + 1;
                    //There should be $dictionaryTypeRelationsCyp related we update it
                    $dictionaryTmp=$dictionaryTypeRelationsTerm[$term];
                    if(array_key_exists($relationType, $dictionaryTmp)){
                        $dictionaryTmp[$relationType]=$dictionaryTmp[$relationType]+1;
                    }else{
                        //Create a new one
                        $dictionaryTmp[$relationType]=1;
                    }
                    $dictionaryTypeRelationsTerm[$term]=$dictionaryTmp;
                }else{
                    //If that term doesnt exist yet, we create a new entry inside diccionarioTerms
                    $diccionarioTerms[$term]=1;
                    //We also save the type of the relation established between the term and the compound:
                    $dictionaryTypeRelationsTerm[$term][$relationType]=1;
                }
            }
            $diccionarioRelations["terms"]=$diccionarioTerms;
            $dictionaryTypeRelations["terms"]=$dictionaryTypeRelationsTerm;
            //We load now the cytochromes relations
            $sql="SELECT c2c2d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Cyp2Document c2c2d
                WHERE lower(c2c2d.compoundName) = (:entityName)
                ORDER BY c2c2d.sumScore DESC
                ";
            $query = $this->_em->createQuery($sql);
            $query->setParameter("entityName", strtolower($entityName));
            $query->setMaxResults(50);
            $arrayCompound2Cyp2Document= $query->getResult();
            foreach($arrayCompound2Cyp2Document as $compound2Cyp2Document){
                $cyp=$compound2Cyp2Document->getCypsMention();
                $relationType=$compound2Cyp2Document->getPatternRelation();
                //we search for the cyp inside diccionarioCytochromes
                if (array_key_exists($cyp, $diccionarioCytochromes)){
                    //If the cyp already exists in the diccionarioCytochromes we update the counter of documents supporting the relation
                    $diccionarioCytochromes[$cyp]=$diccionarioCytochromes[$cyp] + 1;
                    //There should be $dictionaryTypeRelationsCyp related we update it
                    $dictionaryTmp=$dictionaryTypeRelationsCyp[$cyp];
                    if(array_key_exists($relationType, $dictionaryTmp)){
                        $dictionaryTmp[$relationType]=$dictionaryTmp[$relationType]+1;
                    }else{
                        //Create a new one
                        $dictionaryTmp[$relationType]=1;
                    }
                    $dictionaryTypeRelationsCyp[$cyp]=$dictionaryTmp;
                }else{
                    //If that cyp doesnt exist yet, we create a new entry inside diccionarioCytochromes
                    $diccionarioCytochromes[$cyp]=1;
                    //We also save the type of the relation established between the cyp and the compound:
                    $dictionaryTypeRelationsCyp[$cyp][$relationType]=1;
                }
            }
            $diccionarioRelations["cyps"]=$diccionarioCytochromes;
            $dictionaryTypeRelations["cyps"]=$dictionaryTypeRelationsCyp;
            //We do the equivalent for the Markers
            $sql="SELECT c2m2d
                FROM EtoxMicromeEntity2DocumentBundle:Compound2Marker2Document c2m2d
                WHERE lower(c2m2d.compoundName) = (:entityName)
                ORDER BY c2m2d.relationScore DESC
                ";

            $query = $this->_em->createQuery($sql);
            $query->setParameter("entityName", strtolower($entityName));
            $query->setMaxResults(50);
            $arrayCompound2Marker2Document= $query->getResult();
            foreach($arrayCompound2Marker2Document as $compound2Marker2Document){
                $marker=$compound2Marker2Document->getLiverMarkerName();
                $relationType=$compound2Marker2Document->getRelationType();
                if (array_key_exists($marker, $diccionarioMarkers)){
                    $diccionarioMarkers[$marker]=$diccionarioMarkers[$marker] + 1;
                    //There should be $dictionaryTypeRelationsMarker related we update it
                    $dictionaryTmp=$dictionaryTypeRelationsMarker[$marker];
                    if(array_key_exists($relationType, $dictionaryTmp)){
                        $dictionaryTmp[$relationType]=$dictionaryTmp[$relationType]+1;
                    }else{
                        //Create a new one
                        $dictionaryTmp[$relationType]=1;
                    }
                    $dictionaryTypeRelationsMarker[$marker]=$dictionaryTmp;
                }else{
                    $diccionarioMarkers[$marker]=1;
                    //We also save the type of the relation established between the marker and the compound:
                    $dictionaryTypeRelationsMarker[$marker][$relationType]=1;
                }
            }
            $diccionarioRelations["markers"]=$diccionarioMarkers;
            $dictionaryTypeRelations["markers"]=$dictionaryTypeRelationsMarker;
            //We do the equivalent for the Compounds based in their Tanimoto coefficient for structural similarity
            //First we need to get the id from the compoundName($entityName)
            $compound=$em->getRepository('EtoxMicromeEntityBundle:CompoundDict')->getEntityFromName($entityName);
            $idCompound=$compound->getId();
            $sql="SELECT tv
                FROM EtoxMicromeEntityBundle:TanimotoValues tv
                WHERE tv.compound1 = :idCompound
                OR tv.compound2 = :idCompound
                AND tv.tanimoto != 1
                ORDER BY tv.tanimoto DESC
                ";
            $query = $this->_em->createQuery($sql);
            $query->setParameter("idCompound", $idCompound);
            $query->setMaxResults(15);
            $arrayTanimotoValues= $query->getResult();
            foreach($arrayTanimotoValues as $tanimotoValue){
                $compoundName1=$tanimotoValue->getCompound1()->getName();
                $compoundName2=$tanimotoValue->getCompound2()->getName();
                $tanimotoCoeff=$tanimotoValue->getTanimoto();
                //We have to choose the compoundName which is not our entityName, that will be the compound structurally related
                if (strtolower($compoundName1) == strtolower($entityName)){
                    $compoundName = $compoundName2;
                }else{
                    $compoundName = $compoundName1;
                }
                if(strtolower($compoundName1) != strtolower($compoundName2)){//To avoid loop in graph. A compound always have best tanimoto with itself!
                    $diccionarioCompounds[$compoundName]=$tanimotoCoeff;
                }


            }
            $diccionarioRelations["compounds"]=$diccionarioCompounds;
        }

        $arrayReturn=array($diccionarioRelations,$dictionaryTypeRelations);
        return ($arrayReturn);
    }
}