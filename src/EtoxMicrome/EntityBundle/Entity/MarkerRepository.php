<?php

namespace EtoxMicrome\EntityBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * MarkerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MarkerRepository extends EntityRepository
{
    public function getEntityFromId($entityId)
    {
        $message="Inside getEntityFromId at MarkerRepository";
        $query = $this->_em->createQuery("
            SELECT a
            FROM EtoxMicromeEntityBundle:Marker a
            WHERE a.id= :entityId
        ");
        $query->setParameter('entityId', $entityId);
        $query->setMaxResults(2);
        $marker=$query->getResult();
        if(count($marker)==0){
            $errorMessage="There is no entity with that name ('$entityName')";
            $entity=array();
            return $entity;
        }
        if(count($marker)!=1){
            $errorMessage="There are more than one entityName for '$entityName'";
            return $marker[0];
        }
        //We return all the Compounds with the entityName given. By now we supose its only one entity!!!
        $entity=$marker[0];
        return $entity;
    }

    public function getEntityFromName($entityName)
    {
        $message="Inside getEntityFromName at MarkerRepository";
        $query = $this->_em->createQuery("
            SELECT a
            FROM EtoxMicromeEntityBundle:Marker a
            WHERE LOWER(a.name) LIKE :entityName
        ");
        $query->setParameter('entityName', strtolower($entityName));
        $query->setMaxResults(2);
        $marker=$query->getResult();
        if(count($marker)==0){
            $errorMessage="There is no entity with that name ($entityName)";
            $entity=array();
            return $entity;
        }
        if(count($marker)!=1){
            $errorMessage="There are more than one entityName for '$entityName'";
            return $marker[0];
        }
        //We return all the CompoundDict with the entityName given. By now we supose its only one entity!!!
        $entity=$marker[0];
        return $entity;
    }

    public function getIdFromGenericField($key, $value, $arrayEntityId)
    {
        $message="Inside getIdFromGenericField at MarkerRepository";
        $query = $this->_em->createQuery("
            SELECT m
            FROM EtoxMicromeEntityBundle:Marker m
            WHERE m.$key= :value
        ");
        $query->setParameter('value', $value);
        $markers=$query->getResult();
        if(count($markers)==0){
            return $arrayEntityId;
        }
        else{
            $errorMessage="There are at least one Marker for $key = $value";
            //ld($errorMessage);
            foreach($markers as $marker){
                $arrayEntityId[]=$marker->getId();
            }
        }
        //We return all the Compounds with the entityName given. By now we supose its only one entity!!!
        return $arrayEntityId;
    }


    public function getNamesFromGenericField($key, $value){
        $query = $this->_em->createQuery("
            SELECT c
            FROM EtoxMicromeEntityBundle:Marker c
            WHERE LOWER(c.$key) = :value
        ");

        $query->setParameter('value', strtolower($value));
        //$query->setMaxResults(1);
        $markers=$query->getResult();
        $arrayNames=array();
        foreach($markers as $marker){
            array_push($arrayNames, $marker->getName());
        }
        return $arrayNames;
    }

    public function searchEntityGivenAnId($entityId)
    {
        //Given an entityId, we return the entity associated
        $message="Inside searchEntityGivenAnId at MarkerRepository";
        $query = $this->_em->createQuery("
            SELECT m
            FROM EtoxMicromeEntityBundle:Marker m
            WHERE m.entityId = :entityId
        ");
        $query->setParameter('entityId', $entityId);
        $query->setMaxResults(2);
        $compound=$query->getResult();
        if(count($compound)==0){
            $errorMessage="There is no entity with that entityId ($entityId)";
            //ld($errorMessage);
            $entity=array();
            return $entity;
        }
        if(count($compound)!=1){
            $errorMessage="There are more than one entityId for '$entityId'";
            //ld($errorMessage);
            return $compound[0];
        }
        //We return only one entity. Later on we will make the query expansion so we will collect all of them
        $entity=$compound[0];
        return $entity;
    }
}
