<?php

namespace EtoxMicrome\Entity2AbstractBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * Gene2AbstractRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Gene2AbstractRepository extends EntityRepository
{

    public function getValToSearch($field)
    {
        switch ($field) {
            case "hepatotoxicity":
                $valToSearch="hepval";
                break;
            case "cardiotoxicity":
                $valToSearch="cardval";
                break;
            case "nephrotoxicity":
                $valToSearch="nephval";
                break;
            case "phospholipidosis":
                $valToSearch="phosval";
                break;
        }
        return $valToSearch;
    }


    public function getGene2AbstractFromGeneID_orderby($arrayGeneIds, $orderBy)
    {
        return $this->getGene2AbstractFromGeneIDsDQL($arrayGeneIds, $orderBy)->getResult();
    }

    public function getGene2AbstractsFromGeneIDsDQL($arrayGeneIds, $orderBy)
    {//("hepatotoxicity","CompoundDict",arrayEntityId)
        $message="inside getGene2AbstractFromGeneIDsDQL";
        $field="hepatotoxicity";
        $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        $orderBy_backup=$orderBy;
        if ($orderBy=="hepval" or $orderBy=="score"){
            $orderBy="hepval desc";
        }elseif($orderBy=="svmConfidence"){
            $orderBy="svmConfidence desc";
        }elseif($orderBy=="pattern"){
            $orderBy="patternCount asc";
        }elseif($orderBy=="term"){
            $orderBy="hepTermVarScore asc";
        }elseif($orderBy=="rule"){
            $orderBy="ruleScore asc";
        }elseif($orderBy=="curation"){
            $orderBy="curation desc";
        }
        /*$sql="SELECT e2a,a
            FROM EtoxMicromeEntity2AbstractBundle:Entity2Abstract e2a
            JOIN e2a.abstracts a
            WHERE e2a.name IN (:arrayEntityName)
            AND e2a.qualifier = :entityType
            AND a.$valToSearch is not NULL
            ORDER BY a.$valToSearch desc
            ";
        */

        $sql="SELECT g2a
                FROM EtoxMicromeEntity2AbstractBundle:Gene2Abstract g2a
                WHERE g2a.geneId IN (:arrayGeneIds)
                ORDER BY g2a.$orderBy
                ";

        $query = $this->_em->createQuery($sql);
        $query->setParameter("arrayGeneIds", $arrayGeneIds);

        $query->setMaxResults(1000);
        return $query;

    }

    public function findGene2AbstractFromAbstract($abstract)
    {//("hepatotoxicity","CompoundDict",arrayEntityId)
        $message="inside getGene2AbstractFromGeneIDsDQL";
        $abstract_id=$abstract->getId();
        $sql="SELECT g2a
                FROM EtoxMicromeEntity2AbstractBundle:Gene2Abstract g2a
                WHERE g2a.abstracts = :abstract_id
                ";

        $query = $this->_em->createQuery($sql);
        $query->setParameter("abstract_id", $abstract_id);

        $query->setMaxResults(1000);
        return $query->execute();

    }

    public function getAbstractsFromGeneIDs($arrayGeneIds, $orderBy)
    {//("hepatotoxicity","CompoundDict",arrayEntityId)
        $message="inside getAbstractsFromGeneIDs";
        $field="hepatotoxicity";
        $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        $orderBy_backup=$orderBy;
        if ($orderBy=="hepval" or $orderBy=="score"){
            $orderBy="hepval desc";
        }elseif($orderBy=="svmConfidence"){
            $orderBy="svmConfidence desc";
        }elseif($orderBy=="pattern"){
            $orderBy="patternCount asc";
        }elseif($orderBy=="term"){
            $orderBy="hepTermVarScore asc";
        }elseif($orderBy=="rule"){
            $orderBy="ruleScore asc";
        }elseif($orderBy=="curation"){
            $orderBy="curation desc";
        }elseif($orderBy=="toxicology"){
            $orderBy="toxicology desc, g2a.hepval desc";
        }elseif($orderBy=="biomarker"){
            $orderBy="biomarker desc, g2a.hepval desc";
        }

        /*
         $sql="SELECT g2a
                FROM EtoxMicromeEntity2AbstractBundle:Gene2Abstract g2a
                WHERE g2a.geneId IN (:arrayGeneIds)
                ORDER BY g2a.$orderBy
                ";

        $query = $this->_em->createQuery($sql);
        $query->setParameter("arrayGeneIds", $arrayGeneIds);

        $query->setMaxResults(1000);
        $arrayGene2DuplicatedAbstracts=$query->getResult();

        */
        //Testing speed for disambled queries, without using array is much faster than using arrays with "where in construction"

        $arrayGene2DuplicatedAbstracts=[];
        foreach($arrayGeneIds as $geneId){
            $sql="SELECT g2a
            FROM EtoxMicromeEntity2AbstractBundle:Gene2Abstract g2a
            WHERE g2a.geneId = (:geneId)
            ORDER BY g2a.$orderBy
            ";
            $query = $this->_em->createQuery($sql);
            //$query->setParameter("arrayGeneIds", $arrayGeneIds);
            $query->setParameter("geneId", $geneId);

            $query->setMaxResults(1000);
            $arrayGene2DuplicatedAbstracts=array_merge($arrayGene2DuplicatedAbstracts,$query->getResult());
        }
        //ldd(count($arrayGene2DuplicatedAbstracts));
        //We have to gather abstracts (unique)
        $arrayAbstracts=[];
        $arrayAbstractsIDs=[];
        foreach($arrayGene2DuplicatedAbstracts as $gene2Abstract){
            $abstract_id=$gene2Abstract->getAbstracts()->getId();
            if  (!in_array($abstract_id, $arrayAbstractsIDs)){
                array_push($arrayAbstractsIDs, $abstract_id);
                array_push($arrayAbstracts, $gene2Abstract->getAbstracts());
            }
        }
        //We return an array of abstracts without duplicates that contain genes
        return $arrayAbstracts;
    }
    public function getAliasesFromGeneIDs($arrayGeneIds, $orderBy)
    {//("hepatotoxicity","CompoundDict",arrayEntityId)
        $message="inside getAliasesFromGeneIDs";
        $field="hepatotoxicity";
        $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        $orderBy_backup=$orderBy;
        if ($orderBy=="hepval" or $orderBy=="score"){
            $orderBy="hepval desc";
        }elseif($orderBy=="svmConfidence"){
            $orderBy="svmConfidence desc";
        }elseif($orderBy=="pattern"){
            $orderBy="patternCount asc";
        }elseif($orderBy=="term"){
            $orderBy="hepTermVarScore asc";
        }elseif($orderBy=="rule"){
            $orderBy="ruleScore asc";
        }elseif($orderBy=="curation"){
            $orderBy="curation desc";
        }
        $sql="SELECT g2a
                FROM EtoxMicromeEntity2AbstractBundle:Gene2Abstract g2a
                WHERE g2a.geneId IN (:arrayGeneIds)
                ORDER BY g2a.$orderBy
                ";

        $query = $this->_em->createQuery($sql);
        $query->setParameter("arrayGeneIds", $arrayGeneIds);

        $query->setMaxResults(1000);
        $arrayGene2DuplicatedAbstracts=$query->getResult();

        //We have to gather abstracts (unique)
        $arrayNames=[];
        foreach($arrayGene2DuplicatedAbstracts as $gene2Abstract){
            $geneName=$gene2Abstract->getGeneName();
            if  (!in_array($geneName, $arrayNames)){
                array_push($arrayNames, $geneName);
            }
        }
        //We return an array of abstracts without duplicates that contain genes
        return $arrayNames;
    }

    public function getGeneSummary($gene2AbstractId){
        $message="Inside getGeneSummary";
        $em = $this->getEntityManager();
        $dictionary=array();
        $stringOutput="";

        $gene2Abstract=$em->getRepository('EtoxMicromeEntity2AbstractBundle:gene2Abstract')->findOneById($gene2AbstractId);
        $nameGene=$gene2Abstract->getGeneName();
        $entity=$em->getRepository("EtoxMicromeEntityBundle:GeneDictionary")->findOneByGeneName($nameGene);
        if($entity==null){
            $stringOutput="";
            return $stringOutput;
        }
        //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover

        $geneId=$entity->getGeneId();
        if($geneId!=""){
            $dictionary["geneId"]="<a href='http://www.ncbi.nlm.nih.gov/gene/$geneId' target='_blank'>$geneId</a> ";
        }

        $name=$entity->getGeneName();
        if($name!=""){
            $dictionary["name"]="<a href='http://www.ncbi.nlm.nih.gov/gene?term=$geneId' target='_blank'>$name</a> ";
        }


        $taxId=$entity->getTaxId();
        if($taxId!=""){
            $dictionary["taxId"]="<a href='https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=$taxId' target='_blank'>$taxId</a> ";
        }

        foreach($dictionary as $key => $value){
            if ($value!=""){
                $stringOutput=$stringOutput."$key: $value<br/>";
            }
        }
        return ($stringOutput);
    }
}
